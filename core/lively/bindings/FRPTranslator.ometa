ometa FRPTranslator {
    start       = (empty -> (function() {
                    this.id = 0;
                    this.dependents = [];
                    this.hasSubExpression = false;
                    this.result = new StringBuffer();
                    this.result.nextPutAll("(function () {var strm = new lively.bindings.FRPCore.EventStream(); ");
    }.bind(this))()) trans:t
        -> ((function() {
            if (this.hasSubExpression) {
                this.result.nextPutAll("return strm.finalize([");
                this.result.nextPutAll(this.dependents.join(", "));
                this.result.nextPutAll("])})();");
                return this.result.contents();
            } else {
                return t.refString;
            }
                }.bind(this))()),
    trans       = [:t apply(t):ans]      -> ans,
    curlyTrans  = [#begin curlyTrans:r]  -> r
                | [#begin trans*:rs]     -> ('{' + rs.join(';') + '}')
                | trans:r                -> ('{' + r + '}'),
    binop = :op trans:ll trans:rr        -> ((function() {
                                            var isStream = ll.isStream || rr.isStream;
                                            if (isStream) {
                                                var id = this.nextId();
                                                var strmDef = this.makeBinop([ll, rr], op);
                                                var deps = ll.dependencies.clone().concat(rr.dependencies);
                                                this.addSubExpression(id, strmDef, deps);
                                                return {refString: this.ref(id), dependencies: deps, isStream: true}
                                            } else {
                                                return {refString: Strings.format('(%s %s %s)', ll.refString, op, rr.refString), dependencies: [], isStream: false};
                                            }
                                                }.bind(this))()),
    func = anything:args curlyTrans:body -> (['(function (' + args.join(',') + ')' + body + ')', false]),
    call = [#get #durationE] trans:ll trans:rr -> ((function() {
                                                    var id = this.nextId();
                                                    var strmDef = this.makeDurationE(ll.refString, rr.refString);
                                                    var deps = ll.dependencies.clone().concat(rr.dependencies);
                                                    this.addSubExpression(id, strmDef, deps);
                                                    return {refString: this.ref(id), dependencies: deps, isStream: true}}.bind(this))()),
    get = (anything:n ?(n.constructor === String)) -> ((function() {
                                                        this.dependents.push(this.ref(n));
                                                        return {refString: this.ref(n), dependencies: [n], isStream: true}}.bind(this))()),
    getLast = (anything:n ?(n.constructor === String)) -> ((function() {
                                                        return {refString: "this.owner." + n + ".lastValue", dependencies: [], isStream: false}}.bind(this))()),
    number = (anything:n ?(n.constructor === Number)) -> ((function() {
                                                        return {refString: Objects.inspect(n), dependencies: [], isStream: false}}.bind(this))()),
    begin = trans

};
